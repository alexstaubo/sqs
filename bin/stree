#!/usr/bin/env ruby

$: << File.expand_path(File.dirname(__FILE__) + "/../lib")

require "trollop"
require "stree"

# HELPER METHODS

include Stree

def list_buckets(service)
  service.buckets.each do |bucket|
    puts bucket.name
  end
end

def create_bucket(service, name, location)
  service.buckets.build(name).save(location)
end

def destroy_bucket(service, name)
  service.buckets.find(name).destroy
end

def show_bucket(service, name, options = {})
  service.buckets.find(name).objects.find_all.each do |object|
    puts "#{name}/#{object.key}"
  end
end

def list_objects(service)
  service.buckets.each do |bucket|
    bucket.objects.each do |object|
      puts "#{bucket.name}/#{object.key}"
    end
  end
end

def create_object(service, name, file_name, options = {})
  bucket_name, object_name = name.split("/", 2)
  object = service.buckets.find(bucket_name).objects.build(object_name)
  object.content_type = options[:type]
  object.content_encoding = options[:encoding]
  object.content_disposition = options[:disposition]
  object.acl = options[:acl]
  object.content = File.new(file_name)
  object.save
end

def destroy_object(service, name)
  bucket_name, object_name = name.split("/", 2)
  object = service.buckets.find(bucket_name).objects.find(object_name)
  object.destroy
end

def show_object(service, name, file_name = nil)
  bucket_name, object_name = name.split("/", 2)
  object = service.buckets.find(bucket_name).objects.find_first(object_name)
  puts "         object:   #{object.name}/#{object.key}"
  puts "   content type:   #{object.content_type}"
  puts "           size:   #{object.size}"
  puts "           etag:   #{object.etag}"
  puts "  last modified:   #{object.last_modified}"
  if file_name
    if file_name == "-"
      puts object.content
    else
      File.open(file_name, "wb") do |file|
        file.write(object.content)
      end
    end
  end
end

# COMMAND LINE PARSER

ACCESS_KEY_ID = ENV["ACCESS_KEY_ID"]
SECRET_ACCESS_KEY = ENV["SECRET_ACCESS_KEY"]
COMMANDS = %w(bucket object)
BUCKET_SUBCOMMANDS = %w(add remove show)
OBJECT_SUBCOMMANDS = %w(add remove show)

global_options = Trollop::options do
  banner "stree - s3 command line tool"
  opt :access_key_id, "Your access key id to AWS", :type => :string, :default => ACCESS_KEY_ID
  opt :secret_access_key, "Your secret access key to AWS", :type => :string, :default => SECRET_ACCESS_KEY
  opt :debug, "Debug mode", :type => :flag, :default => false
  stop_on COMMANDS
end

Trollop::die "No access key id given" unless global_options[:access_key_id]
Trollop::die "No secret access key given" unless global_options[:secret_access_key]

service = Service.new(:access_key_id => global_options[:access_key_id],
                      :secret_access_key => global_options[:secret_access_key],
                      :debug => global_options[:debug])

command = ARGV.shift

begin
  case command
  when "bucket"
    command_options = Trollop::options do
      banner "manage buckets"
      stop_on BUCKET_SUBCOMMANDS
    end
    subcommand = ARGV.shift
    case subcommand
    when "add"
      subcommand_options = Trollop::options do
        banner "add bucket"
        opt :location, "Location of the bucket - EU or US", :default => "US", :type => :string
      end
      name = ARGV.shift
      Trollop::die "Bucket has not been added because of unknown error" unless create_bucket(service, name, subcommand_options[:location])
    when "remove"
      subcommand_options = Trollop::options do
        banner "remove bucket"
      end
      name = ARGV.shift
      Trollop::die "Bucket name must be given" if name.nil? or name.empty?
      Trollop::die "Bucket has not been removed because of unknown error" unless destroy_bucket(service, name)
    when "show"
      subcommand_options = Trollop::options do
        banner "show bucket"
        opt :prefix, "Limits the response to keys which begin with the indicated prefix", :type => :string
        opt :marker, "Indicates where in the bucket to begin listing", :type => :string
        opt :max_keys, "The maximum number of keys you'd like to see", :type => :integer
        opt :delimiter, "Causes keys that contain the same string between the prefix and the first occurrence of the delimiter to be rolled up into a single result element", :type => :string
      end
      name = ARGV.shift
      Trollop::die "Bucket name must be given" if name.nil? or name.empty?
      show_bucket(service, name, subcommand_options)
    when nil
      list_buckets(service)
    else
      Trollop::die "Unknown subcommand: #{subcommand.inspect}"
    end
  when "object"
    command_options = Trollop::options do
      banner "manage objects"
      stop_on OBJECT_SUBCOMMANDS
    end
    subcommand = ARGV.shift
    case subcommand
    when "add"
      subcommand_options = Trollop::options do
        banner "object add s3_object_name local_file_name"
        opt :type, "A standard MIME type describing the format of the contents", :default => "binary/octet-stream"
        opt :disposition, "Specifies presentational information for the object", :type => :string
        opt :encoding, "Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied in order to obtain the media-type referenced by the Content-Type header field", :type => :string
        opt :acl, "The canned ACL to apply to the object. Options include private, public-read, public-read-write, and authenticated-read", :type => :string
      end
      name = ARGV.shift
      Trollop::die "No object name given" if name.nil? or name.empty?
      file_name = ARGV.shift
      Trollop::die "No file name given" if file_name.nil? or file_name.empty?
      Trollop::die "Object has not been added because of unknown error" unless create_object(service, name, file_name, subcommand_options)
    when "remove"
      subcommand_options = Trollop::options do
        banner "object remove s3_object_name"
      end
      name = ARGV.shift
      Trollop::die "No object name given" if name.nil? or name.empty?
      Trollop::die "Object has not been removed because of unknown error" unless destroy_object(service, name)
    when "show"
      subcommand_options = Trollop::options do
        banner "object show s3_object_name optional_file_name"
      end
      name = ARGV.shift
      Trollop::die "No object name given" if name.nil? or name.empty?
      file_name = ARGV.shift
      show_object(service, name, file_name)
    when nil
      list_objects(service)
    else
      Trollop::die "Unknown subcommand: #{subcommand.inspect}"
    end
  when nil
    Trollop::die "No command given"
  else
    Trollop::die "Unknown command #{command.inspect}"
  end
rescue Error::ResponseError => e
  Trollop::die e.message.sub(/\.+\Z/, "")
end
